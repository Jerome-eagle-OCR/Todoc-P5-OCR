plugins {
    id 'com.android.application'
    id 'jacoco'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    buildFeatures {
        viewBinding true
    }

    defaultConfig {
        applicationId "com.cleanup.myapplication"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // The following argument makes the Android Test Orchestrator run its
        // "pm clear" command after each test invocation. This command ensures
        // that the app's state is completely cleared between tests.
        testInstrumentationRunnerArguments clearPackageData: 'true'
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        animationsDisabled = true
    }

    buildTypes {
        release {
            // Release app code minification:
            useProguard false // <-- disable proguard
            minifyEnabled true // <-- enable minification
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
        }
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'

    // Room
    def room_version = "2.3.0"
    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"

    // Annotations
    implementation 'org.jetbrains:annotations:21.0.1'

    //--------------------------------------------------------------------
    // For testing
    //--------------------------------------------------------------------
    // Mockito
    testImplementation 'org.mockito:mockito-core:3.11.2'
    androidTestImplementation "org.mockito:mockito-android:3.11.2"
    // Orchestrator to have app cleaned between tests
    androidTestUtil 'androidx.test:orchestrator:1.4.0'
    // Executor
    testImplementation 'androidx.arch.core:core-testing:2.1.0'
    androidTestImplementation 'androidx.arch.core:core-testing:2.1.0'
    // Junit4
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    // Espresso
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    //--------------------------------------------------------------------
}

// JaCoCo stuff
android.applicationVariants.all { variant ->
    def variantName = variant.name.capitalize()
    def filesToAnalyze = [
            '**/*ViewModel.class',
            '**/*Repository.class'
    ]

    task("jacoco${variantName}Report", type: JacocoReport, dependsOn: "test${variantName}UnitTest") {
        group 'Reporting'
        description "Generate ${variantName} Jacoco coverage reports."

        def htmlOutDir = layout.buildDirectory.dir("reports/jacoco/$name/html").get().asFile

        doLast {
            openReport htmlOutDir
        }

        reports {
            xml.enabled = true
            html {
                destination htmlOutDir
            }
        }

        getSourceDirectories().setFrom(files(android.sourceSets.main.java.srcDirs))
        getExecutionData().setFrom(files("${buildDir}/jacoco/test${variantName}UnitTest.exec"))
        getClassDirectories().setFrom(fileTree(dir: variant.javaCompiler.destinationDir, includes: filesToAnalyze))
    }
}

// Open JaCoCo report after generation
def openReport(htmlOutDir) {
    final reportPath = "$htmlOutDir\\index.html"

    println "HTML Report: $reportPath"

    def os = org.gradle.internal.os.OperatingSystem.current()
    if (os.isWindows()) {
        exec { commandLine 'cmd', '/c', "start $reportPath" }
    } else if (os.isMacOsX()) {
        exec { commandLine 'open', "$reportPath" }
    } else if (os.isLinux()) {
        try {
            exec { commandLine 'xdg-open', "$reportPath" }
        } catch (Exception ignored) {
            if (localProperties.containsKey("linux-html-cmd")) {
                exec { commandLine properties.get("linux-html-cmd"), "$reportPath" }
            } else {
                println "'linux-html-cmd' property could not be found in 'local.properties'"
            }
        }
    }
}
